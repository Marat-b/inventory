{"remainingRequest":"C:\\Softz\\inventory\\src\\inventory\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Softz\\inventory\\src\\inventory\\node_modules\\@ng-bootstrap\\ng-bootstrap\\datepicker\\ngb-date-adapter.js","dependencies":[{"path":"C:\\Softz\\inventory\\src\\inventory\\node_modules\\@ng-bootstrap\\ng-bootstrap\\datepicker\\ngb-date-adapter.js","mtime":499162500000},{"path":"C:\\Softz\\inventory\\src\\inventory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1522936630164},{"path":"C:\\Softz\\inventory\\src\\inventory\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":499162500000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\n/**\n * Abstract type serving as a DI token for the service converting from your application Date model to internal\n * NgbDateStruct model.\n * A default implementation converting from and to NgbDateStruct is provided for retro-compatibility,\n * but you can provide another implementation to use an alternative format, ie for using with native Date Object.\n */\nvar NgbDateAdapter = /*@__PURE__*/ (function () {\n    function NgbDateAdapter() {\n    }\n    return NgbDateAdapter;\n}());\nexport { NgbDateAdapter };\nvar NgbDateStructAdapter = /*@__PURE__*/ (function (_super) {\n    __extends(NgbDateStructAdapter, _super);\n    function NgbDateStructAdapter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Converts a NgbDateStruct value into NgbDateStruct value\n     * @param  {NgbDateStruct} value\n     * @return {NgbDateStruct}\n     */\n    /**\n       * Converts a NgbDateStruct value into NgbDateStruct value\n       * @param  {NgbDateStruct} value\n       * @return {NgbDateStruct}\n       */\n    NgbDateStructAdapter.prototype.fromModel = /**\n       * Converts a NgbDateStruct value into NgbDateStruct value\n       * @param  {NgbDateStruct} value\n       * @return {NgbDateStruct}\n       */\n        function (date) {\n            return (date && date.year && date.month && date.day) ? { year: date.year, month: date.month, day: date.day } : null;\n        };\n    /**\n     * Converts a NgbDateStruct value into NgbDateStruct value\n     * @param  {NgbDateStruct} value\n     * @return {NgbDateStruct}\n     */\n    /**\n       * Converts a NgbDateStruct value into NgbDateStruct value\n       * @param  {NgbDateStruct} value\n       * @return {NgbDateStruct}\n       */\n    NgbDateStructAdapter.prototype.toModel = /**\n       * Converts a NgbDateStruct value into NgbDateStruct value\n       * @param  {NgbDateStruct} value\n       * @return {NgbDateStruct}\n       */\n        function (date) {\n            return (date && date.year && date.month && date.day) ? { year: date.year, month: date.month, day: date.day } : null;\n        };\n    return NgbDateStructAdapter;\n}(NgbDateAdapter));\nexport { NgbDateStructAdapter };\n",null]}