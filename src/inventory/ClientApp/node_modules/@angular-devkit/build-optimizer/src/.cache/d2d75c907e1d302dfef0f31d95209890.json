{"remainingRequest":"C:\\Softz\\inventory\\src\\inventory\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Softz\\inventory\\src\\inventory\\node_modules\\@ng-bootstrap\\ng-bootstrap\\progressbar\\progressbar.js","dependencies":[{"path":"C:\\Softz\\inventory\\src\\inventory\\node_modules\\@ng-bootstrap\\ng-bootstrap\\progressbar\\progressbar.js","mtime":499162500000},{"path":"C:\\Softz\\inventory\\src\\inventory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1522936630164},{"path":"C:\\Softz\\inventory\\src\\inventory\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":499162500000}],"contextDependencies":[],"result":["import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { getValueInRange } from '../util/util';\nimport { NgbProgressbarConfig } from './progressbar-config';\n/**\n * Directive that can be used to provide feedback on the progress of a workflow or an action.\n */\nvar NgbProgressbar = /*@__PURE__*/ (function () {\n    function NgbProgressbar(config) {\n        /**\n           * Current value to be displayed in the progressbar. Should be smaller or equal to \"max\" value.\n           */\n        this.value = 0;\n        this.max = config.max;\n        this.animated = config.animated;\n        this.striped = config.striped;\n        this.type = config.type;\n        this.showValue = config.showValue;\n        this.height = config.height;\n    }\n    NgbProgressbar.prototype.getValue = function () { return getValueInRange(this.value, this.max); };\n    NgbProgressbar.prototype.getPercentValue = function () { return 100 * this.getValue() / this.max; };\n    return NgbProgressbar;\n}());\nexport { NgbProgressbar };\n//# sourceMappingURL=progressbar.js.map\n",null]}