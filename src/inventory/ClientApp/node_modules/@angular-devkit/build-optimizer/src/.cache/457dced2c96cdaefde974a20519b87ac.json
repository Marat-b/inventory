{"remainingRequest":"C:\\Softz\\inventory\\src\\inventory\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Softz\\inventory\\src\\inventory\\node_modules\\@ng-bootstrap\\ng-bootstrap\\datepicker\\ngb-date-parser-formatter.js","dependencies":[{"path":"C:\\Softz\\inventory\\src\\inventory\\node_modules\\@ng-bootstrap\\ng-bootstrap\\datepicker\\ngb-date-parser-formatter.js","mtime":499162500000},{"path":"C:\\Softz\\inventory\\src\\inventory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1522936630164},{"path":"C:\\Softz\\inventory\\src\\inventory\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":499162500000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { padNumber, toInteger, isNumber } from '../util/util';\r\n/**\r\n * Abstract type serving as a DI token for the service parsing and formatting dates for the NgbInputDatepicker\r\n * directive. A default implementation using the ISO 8601 format is provided, but you can provide another implementation\r\n * to use an alternative format.\r\n */\r\nvar /**\r\n * Abstract type serving as a DI token for the service parsing and formatting dates for the NgbInputDatepicker\r\n * directive. A default implementation using the ISO 8601 format is provided, but you can provide another implementation\r\n * to use an alternative format.\r\n */ NgbDateParserFormatter = /*@__PURE__*/ (function () {\r\n    function NgbDateParserFormatter() {\r\n    }\r\n    return NgbDateParserFormatter;\r\n}());\r\n/**\r\n * Abstract type serving as a DI token for the service parsing and formatting dates for the NgbInputDatepicker\r\n * directive. A default implementation using the ISO 8601 format is provided, but you can provide another implementation\r\n * to use an alternative format.\r\n */\r\nexport { NgbDateParserFormatter };\r\nvar NgbDateISOParserFormatter = /*@__PURE__*/ (function (_super) {\r\n    __extends(NgbDateISOParserFormatter, _super);\r\n    function NgbDateISOParserFormatter() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    NgbDateISOParserFormatter.prototype.parse = function (value) {\r\n        if (value) {\r\n            var dateParts = value.trim().split('-');\r\n            if (dateParts.length === 1 && isNumber(dateParts[0])) {\r\n                return { year: toInteger(dateParts[0]), month: null, day: null };\r\n            }\r\n            else if (dateParts.length === 2 && isNumber(dateParts[0]) && isNumber(dateParts[1])) {\r\n                return { year: toInteger(dateParts[0]), month: toInteger(dateParts[1]), day: null };\r\n            }\r\n            else if (dateParts.length === 3 && isNumber(dateParts[0]) && isNumber(dateParts[1]) && isNumber(dateParts[2])) {\r\n                return { year: toInteger(dateParts[0]), month: toInteger(dateParts[1]), day: toInteger(dateParts[2]) };\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    NgbDateISOParserFormatter.prototype.format = function (date) {\r\n        return date ?\r\n            date.year + \"-\" + (isNumber(date.month) ? padNumber(date.month) : '') + \"-\" + (isNumber(date.day) ? padNumber(date.day) : '') :\r\n            '';\r\n    };\r\n    return NgbDateISOParserFormatter;\r\n}(NgbDateParserFormatter));\r\nexport { NgbDateISOParserFormatter };\r\n",null]}