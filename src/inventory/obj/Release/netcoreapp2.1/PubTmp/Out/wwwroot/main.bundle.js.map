{"version":3,"sources":["./ClientApp/$_lazy_route_resource lazy","./ClientApp/app/app.component.ts","./ClientApp/app/app.module.ts","./ClientApp/app/components/computer/computer.html","./ClientApp/app/components/computer/computer.item/computer.item.html","./ClientApp/app/components/computer/computer.item/computer.item.ts","./ClientApp/app/components/computer/computer.modal.html","./ClientApp/app/components/computer/computer.ts","./ClientApp/app/components/computer/product.modal.html","./ClientApp/app/components/computer/service.modal.html","./ClientApp/app/components/home/home.component.html","./ClientApp/app/components/home/home.component.ts","./ClientApp/app/components/monitor/monitor.html","./ClientApp/app/components/monitor/monitor.ts","./ClientApp/app/inventory.component.html","./ClientApp/app/main.ts","./ClientApp/app/shared/model/computer/computer.model.ts","./ClientApp/app/shared/service/computer/computer.getter/computer.getter.service.ts","./ClientApp/app/shared/service/computer/computer.service.ts","./ClientApp/app/shared/service/monitor/monitor.service.ts","./ClientApp/app/shared/service/product/product.service.ts","./ClientApp/app/shared/service/service/service.service.ts"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,kF;;;;;;;;;;;;;;;;ACV0C;AAK1C;IAAA;IAA4B,CAAC;IAAhB,YAAY;QAJxB,wEAAS,CAAC;YACT,QAAQ,EAAE,QAAQ;;SAEnB,CAAC;OACW,YAAY,CAAI;IAAD,mBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLgC;AACC;AACb;AACE;AACE;AACU;AACJ;AACF;AACH;AAElD,mFAAkB,CAAC,2EAAQ,CAAC,CAAC;AAE7B,mEAAmE;AACnE,iDAAiD;AACjD,4FAA4F;AAElB;AACG;AACH;AACA;AAC+B;AAEhC;AACmE;AAC5E;AACyB;AAgBzF;IAAA;IAAyB,CAAC;IAAb,SAAS;QAdrB,uEAAQ,CAAC;YACR,OAAO,EAAO,CAAE,gFAAa,EAAC,8EAAgB;gBAC9C,6EAAS,CAAC,OAAO,EAAE,EAAC,mEAAW;gBAC/B,qEAAY,CAAC,OAAO,CAAC;oBACjB,EAAE,IAAI,EAAE,EAAE,EAAG,SAAS,EAAE,uFAAa,EAAE;oBACvC,EAAE,IAAI,EAAE,UAAU,EAAG,SAAS,EAAE,mGAA2B,EAAE;oBAC7D,EAAE,IAAI,EAAE,SAAS,EAAG,SAAS,EAAE,gGAA0B,EAAE;iBAC5D,CAAC;aACJ;YACE,YAAY,EAAE,CAAC,oEAAY,EAAE,gGAA0B,EAAE,mGAA2B,EAAE,uFAAa,EAAE,gHAAqB,EAAE,4FAAoB,EAAE,2FAAmB,EAAE,2FAAmB,CAAE;YAC5L,SAAS,EAAE,CAAC,+FAAc,EAAE,mGAAe,EAAE,gIAAqB,EAAE,gGAAc,EAAE,gGAAc,EAAC,EAAC,OAAO,EAAE,gEAAS,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC;YAC1I,SAAS,EAAK,CAAE,oEAAY,CAAE;YAC5B,eAAe,EAAE,CAAC,4FAAoB,EAAE,2FAAmB,EAAE,2FAAmB,CAAC;SACpF,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;ACzCtB,6yD;;;;;;;ACAA,wBAAwB,0BAA0B,eAAe,qBAAqB,eAAe,4BAA4B,eAAe,4BAA4B,eAAe,wBAAwB,eAAe,yBAAyB,eAAe,+CAA+C,GAAG,+CAA+C,sW;;;;;;;;;;;;;;;;;;;ACApS;AAYvE;IASE;QAEE,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC;QACZ,IAAI,CAAC,QAAQ,GAAG,IAAI,mEAAY,EAAkB,CAAC;QACnD,IAAI,CAAC,QAAQ,GAAG,IAAI,mEAAY,EAAkB,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,IAAI,mEAAY,EAAkB,CAAC;IACxD,CAAC;IAED,sCAAM,GAAN,UAAO,MAAa;QAElB,IAAI,CAAC,MAAM,GAAC,MAAM,CAAC;QACjB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACzB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QAC7C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QAC/C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACzC,CAAC;IAEC,wCAAQ,GAAR,UAAS,MAAc;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC3C,CAAC;IAED,wCAAQ,GAAR,UAAS,MAAc;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5C,CAAC;IA/BQ;QAAR,oEAAK,EAAE;;gEAA+B;IAC9B;QAAR,oEAAK,EAAE;;+DAA4B;IAC1B;QAAT,qEAAM,EAAE;kCAAW,mEAAY;2DAAiB;IACvC;QAAT,qEAAM,EAAE;kCAAW,mEAAY;2DAAiB;IACvC;QAAT,qEAAM,EAAE;kCAAY,mEAAY;4DAAiB;IAPzC,qBAAqB;QAJjC,wEAAS,CAAC;YACT,QAAQ,EAAE,cAAc;;SAEzB,CAAC;;OACW,qBAAqB,CAmCjC;IAAD,4BAAC;CAAA;AAnCiC;;;;;;;;ACZlC,iQAAiQ,gCAAgC,gNAAgN,gCAAgC,iFAAiF,wBAAwB,mFAAmF,yBAAyB,+EAA+E,mCAAmC,yFAAyF,kCAAkC,sFAAsF,6BAA6B,gFAAgF,6BAA6B,4FAA4F,mCAAmC,qFAAqF,8BAA8B,0FAA0F,kCAAkC,mFAAmF,8BAA8B,2FAA2F,+BAA+B,8FAA8F,gCAAgC,iGAAiG,4BAA4B,yFAAyF,+BAA+B,0FAA0F,yBAAyB,6FAA6F,+BAA+B,qFAAqF,6BAA6B,sFAAsF,8BAA8B,2FAA2F,mDAAmD,GAAG,mDAAmD,iGAAiG,mDAAmD,GAAG,mDAAmD,qM;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA/5F;AACJ;AAE4B;AAGV;AACH;AACA;AAC+B;AAEd;AAc/F,kEAAkE;AAMlE;IAMI,8BAAmB,WAA2B,EAAU,qBAA4C,EACxF,eAAgC;QAD5C,iBAeC;QAfkB,gBAAW,GAAX,WAAW,CAAgB;QAAU,0BAAqB,GAArB,qBAAqB,CAAuB;QACxF,oBAAe,GAAf,eAAe,CAAiB;QAExC,IAAI,CAAC,iBAAiB,GAAG,IAAI,gGAAiB,EAAE,CAAC,CAAC,mEAAmE;QACvH,8BAA8B;QAE9B,OAAO,CAAC,GAAG,CAAC,iCAAiC,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;QAEnF,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,WAAC;YACrG,KAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;YAC3B,OAAO,CAAC,GAAG,CAAC,8CAA8C,CAAC,CAAC;YAC5D,qDAAqD;YACrD,uFAAuF;QAE3F,CAAC,CAAC,CAAC,CAAE,cAAc;IACrB,CAAC;IAED,0CAAW,GAAX;QACI,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IACpC,CAAC;IAvBM;QAAR,oEAAK,EAAE;;8DAAkB;IAFf,oBAAoB;QALhC,wEAAS,CAAC;YACT,QAAQ,EAAE,eAAe;;YAEzB,SAAS,EAAE,CAAC,kGAAe,CAAC;SAC7B,CAAC;yCAOkC,kFAAc,EAAiC,+HAAqB;YACvE,kGAAe;OAPnC,oBAAoB,CA4BhC;IAAD,2BAAC;CAAA;AA5BgC;AA8BjC,yEAAyE;AAOzE;IAMI,6BAAmB,WAA2B,EAClC,qBAA4C,EAC5C,cAA8B;QAF1C,iBAQC;QARkB,gBAAW,GAAX,WAAW,CAAgB;QAClC,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,mBAAc,GAAd,cAAc,CAAgB;QACtC,yCAAyC;QACzC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC;QAC5D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,WAAC;YACjG,KAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IACP,CAAC;IAED,yCAAW,GAAX;QACI,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IACpC,CAAC;IAED,wCAAU,GAAV;QACI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC,EAAD,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;YACxD,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACpC,IAAI;gBAAC,MAAM,CAAC,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IACD,+CAAiB,GAAjB;QACI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC,EAAD,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;YACxD,EAAE,CAAC,CAAC,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC,WAAW,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC;YAC5C,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC,WAAW,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAClD,IAAI;gBAAC,MAAM,CAAC,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IACD,6CAAe,GAAf;QACI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC,EAAD,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;YACxD,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC9C,IAAI;gBAAC,MAAM,CAAC,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IACD,yCAAW,GAAX;QACI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC,EAAD,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;YACxD,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACtC,IAAI;gBAAC,MAAM,CAAC,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IA9CQ;QAAR,oEAAK,EAAE;;6DAAmB;IADlB,mBAAmB;QAN/B,wEAAS,CACN;YACI,QAAQ,EAAE,gBAAgB;;YAE1B,SAAS,EAAC,CAAC,+FAAc,CAAC;SAC7B,CAAC;yCAO8B,kFAAc;YACX,+HAAqB;YAC5B,+FAAc;OARjC,mBAAmB,CAgD/B;IAAD,0BAAC;CAAA;AAhD+B;AAmDhC,yEAAyE;AAOzE;IAMI,6BAAmB,WAA2B,EAClC,qBAA4C,EAC5C,cAA8B;QAF1C,iBAQC;QARkB,gBAAW,GAAX,WAAW,CAAgB;QAClC,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,mBAAc,GAAd,cAAc,CAAgB;QACtC,yCAAyC;QACzC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC;QAC5D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,WAAC;YACjG,KAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IACP,CAAC;IAED,yCAAW,GAAX;QACI,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IACpC,CAAC;IAED,2CAAa,GAAb;QACI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC,EAAD,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;YACxD,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC;YACpC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC1C,IAAI;gBAAC,MAAM,CAAC,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IAEP,CAAC;IAED,2CAAa,GAAb;QACI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC,EAAD,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;YACxD,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC;YACpC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC1C,IAAI;gBAAC,MAAM,CAAC,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IAEP,CAAC;IAED,+CAAiB,GAAjB;QACI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC,EAAD,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;YACxD,EAAE,CAAC,CAAC,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC,WAAW,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC;YAC5C,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC,WAAW,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAClD,IAAI;gBAAC,MAAM,CAAC,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IAEP,CAAC;IA7CQ,mBAAmB;QAN/B,wEAAS,CACN;YACI,QAAQ,EAAE,gBAAgB;;YAE1B,SAAS,EAAE,CAAC,+FAAc,CAAC;SAC9B,CAAC;yCAO8B,kFAAc;YACX,+HAAqB;YAC5B,+FAAc;OARjC,mBAAmB,CA8C/B;IAAD,0BAAC;CAAA;AA9C+B;AAqDhC;IAWA,6BAA6B;IACzB,qCAAoB,eAAgC,EAAU,MAA2B,EAC7E,qBAA4C,EAAU,oBAA8B,EAAU,cAA8B,EAC5H,mBAA6B,EAAU,mBAA6B;QAF5D,oBAAe,GAAf,eAAe,CAAiB;QAAU,WAAM,GAAN,MAAM,CAAqB;QAC7E,0BAAqB,GAArB,qBAAqB,CAAuB;QAAU,yBAAoB,GAApB,oBAAoB,CAAU;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAC5H,wBAAmB,GAAnB,mBAAmB,CAAU;QAAU,wBAAmB,GAAnB,mBAAmB,CAAU;QAVlF,SAAI,GAAQ,CAAC,CAAC;QAYZ,IAAI,CAAC,aAAa,GAAC,EAAE,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAC,EAAE,CAAC;QACjB,IAAI,CAAC,WAAW,GAAC,CAAC,CAAC;IACrB,CAAC;IAEH,sCAAsC;IACpC,8CAAQ,GAAR;QAAA,iBA0BG;QAxBD,kDAAkD;QAClD,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,WAAC;YACtC,qCAAqC;YACrC,KAAI,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC,kDAAkD;YAC5E,wEAAwE;YACxE,0CAA0C;YACxC,OAAO,CAAC,GAAG,CAAC,sCAAsC,GAAG,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;YACvF,OAAO,CAAC,GAAG,CAAC,wCAAwC,GAAG,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;YAC3F,OAAO,CAAC,GAAG,CAAC,wCAAwC,GAAG,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;YAC3F,KAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,KAAI,CAAC,QAAQ,CAAC,CAAC;YAC3D,OAAO,CAAC,GAAG,CAAC,iCAAiC,GAAG,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;YAC7E,OAAO,CAAC,GAAG,CAAC,mCAAmC,GAAG,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;YACjF,OAAO,CAAC,GAAG,CAAC,mCAAmC,GAAG,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;YACnF,KAAI,CAAC,QAAQ,GAAC,KAAI,CAAC,aAAa,CAAC,MAAM,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEJ,0CAA0C;QAEzC,IAAI,CAAC,MAAM,GAAC,UAAC,KAAwB,IAAG,YAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,oBAAoB,EAAE;aACjF,GAAG,CAAC,UAAC,IAAY,IAAK,WAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,aAAa;aAC/D,GAAG,CAAC,WAAC,IAAE,QAAC,CAAC,KAAK,EAAP,CAAO,CAAC;aAEf,MAAM,CAAC,WAAC,IAAE,WAAI,MAAM,CAAC,IAAI,EAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAA7B,CAA6B,CAAC,CAAC,MAAM,CAAC,CAAC,EAAC,EAAE,CAAC,EAH/B,CAG+B,CAAC,EAJnB,CAImB,CAAC;IAE5D,CAAC;IAEL,0CAA0C;IACtC,8CAAQ,GAAR,UAAS,KAAoB;QAE3B,qBAAqB;QACrB,IAAI,CAAC,qBAAqB,CAAC,UAAU,GAAC,KAAK,CAAC,UAAU,CAAC;QACrD,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,oBAAoB,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;QACrE;kGAC0F;IAC9F,CAAC;IAED,+CAAS,GAAT,UAAU,KAAqB;QAC3B,IAAI,CAAC,qBAAqB,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;QACzD,0DAA0D;QAC1D,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IACvE,CAAC;IAED,+CAAS,GAAT,UAAU,KAAqB;QAC3B,IAAI,CAAC,qBAAqB,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;QACzD,IAAI,CAAC,qBAAqB,CAAC,YAAY,GAAG,KAAK,CAAC,YAAY,CAAC;QAC7D,0DAA0D;QAC1D,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IACvE,CAAC;IAID,gDAAgD;IAC9C,kDAAY,GAAZ,UAAa,WAAe;QAC3B,2CAA2C;QAC3C,uEAAuE;QACvE,0CAA0C;QACzC,IAAI,CAAC,WAAW,GAAC,WAAW,CAAC;QAC7B,IAAI,KAAK,GAAC,CAAC,WAAW,GAAC,CAAC,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC;QACxC,IAAI,GAAG,GAAC,KAAK,GAAC,IAAI,CAAC,QAAQ,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,EAAC,GAAG,CAAC,CAAC;IACpD,CAAC;IAED,wCAAwC;IACtC,kDAAY,GAAZ;QAAA,iBAcD;QAZG,OAAO,CAAC,GAAG,CAAC,sCAAsC,GAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAG/D,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,WAAC;YACtC,KAAI,CAAC,aAAa,GAAG,CAAC,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC,EAAD,CAAC,CAAC;iBAC7B,MAAM,CAAC,WAAC,IAAI,QAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,KAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,EAA5D,CAA4D,CAAC,CAAC;YACjF,0CAA0C;YAC3C,+DAA+D;YAC9D,KAAI,CAAC,QAAQ,GAAC,KAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;YACxD,KAAI,CAAC,QAAQ,GAAC,KAAI,CAAC,aAAa,CAAC,MAAM,CAAC;QAC1C,CAAC,CAAC,CAAC,CAAE,eAAe;IAExB,CAAC;IAEC,oCAAoC;IACpC,oDAAc,GAAd,UAAe,KAAuB;QAClC,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;QACnD,IAAI,GAAG,GAAG,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;QACjC,6FAA6F;QAC5F,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IACnC,CAAC;IAED,gCAAgC;IAChC,iDAAW,GAAX;QACI,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC3B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC,EAAD,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;YAC1D,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACtC,IAAI;gBAAC,MAAM,CAAC,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5D,CAAC;IAED,sCAAsC;IACtC,wDAAkB,GAAlB;QACI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC,EAAD,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;YAC1D,EAAE,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,YAAY,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,YAAY,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACpD,IAAI;gBAAC,MAAM,CAAC,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5D,CAAC;IAED,sCAAsC;IACtC,wDAAkB,GAAlB;QACI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC,EAAD,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;YAC1D,EAAE,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,YAAY,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,YAAY,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACpD,IAAI;gBAAC,MAAM,CAAC,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5D,CAAC;IAED,sCAAsC;IACtC,qDAAe,GAAf;QACI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC,EAAD,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;YAC1D,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC9C,IAAI;gBAAC,MAAM,CAAC,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5D,CAAC;IAEL,8CAA8C;IAC9C,oDAAc,GAAd;QACI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC,EAAD,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;YAC1D,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC;YACtC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC5C,IAAI;gBAAC,MAAM,CAAC,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5D,CAAC;IAjKQ,2BAA2B;QALvC,wEAAS,CAAC;YACN,QAAQ,EAAE,qBAAqB;;YAE/B,SAAS,EAAE,CAAC,uFAAmB,CAAC;SACpC,CAAC;yCAauC,kGAAe,EAAkB,uFAAmB;YACtD,+HAAqB,EAAgC,4EAAQ,EAA0B,+FAAc;YACvG,4EAAQ,EAA+B,4EAAQ;OAdvE,2BAA2B,CAkKvC;IAAD,kCAAC;CAAA;AAlKuC;;;;;;;;ACnLxC,wNAAwN,cAAc,qbAAqb,cAAc,2BAA2B,cAAc,2BAA2B,kBAAkB,qM;;;;;;;ACA/vB,+NAA+N,cAAc,0dAA0d,WAAW,2BAA2B,kBAAkB,2BAA2B,gBAAgB,2BAA2B,YAAY,qM;;;;;;;ACAj1B,uG;;;;;;;;;;;;;;;;ACA0C;AAO1C;IAAA;IAA2B,CAAC;IAAf,aAAa;QALzB,wEAAS,CAAC;YACT,QAAQ,EAAE,gBAAgB;;SAE3B,CAAC;OAEW,aAAa,CAAE;IAAD,oBAAC;CAAA;AAAF;;;;;;;;ACP1B,ylCAAylC,gBAAgB,mBAAmB,YAAY,mBAAmB,mBAAmB,mBAAmB,mBAAmB,mBAAmB,sCAAsC,GAAG,sCAAsC,yC;;;;;;;;;;;;;;;;;;;;;;;;;;ACApwC;AACa;AAGe;AAG/C;AACS;AACQ;AACZ;AACF;AAQlC;IAWA,6BAA6B;IAC3B,oCAAoB,cAA6B,EAAS,MAA2B;QAAjE,mBAAc,GAAd,cAAc,CAAe;QAAS,WAAM,GAAN,MAAM,CAAqB;QARrF,SAAI,GAAQ,CAAC,CAAC;QAUZ,IAAI,CAAC,YAAY,GAAC,EAAE,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAC,EAAE,CAAC;QACjB,IAAI,CAAC,WAAW,GAAC,CAAC,CAAC;IACrB,CAAC;IAEH,sCAAsC;IACpC,6CAAQ,GAAR;QAAA,iBAqBG;QAnBD,kDAAkD;QAClD,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,WAAC;YACrC,KAAI,CAAC,YAAY,GAAG,CAAC,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC,EAAD,CAAC,CAAC,CAAC;YAEpC,wEAAwE;YACxE,0CAA0C;YAC1C,yDAAyD;YACzD,KAAI,CAAC,QAAQ,GAAC,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;YACvD,KAAI,CAAC,QAAQ,GAAC,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,yCAAyC;QAEzC,IAAI,CAAC,MAAM,GAAC,UAAC,KAAwB,IAAG,YAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,oBAAoB,EAAE;aACrF,GAAG,CAAC,UAAC,IAAW,IAAG,WAAI,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,YAAY;aAErD,GAAG,CAAC,WAAC,IAAE,QAAC,CAAC,KAAK,EAAP,CAAO,CAAC;aACjB,MAAM,CAAC,WAAC,IAAE,WAAI,MAAM,CAAC,IAAI,EAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAA7B,CAA6B,CAAC,CAAC,MAAM,CAAC,CAAC,EAAC,EAAE,CAAC,EAHpC,CAGoC,CAAC,EAJjB,CAIiB,CAAC;IAE1D,CAAC;IAEL,gDAAgD;IAC9C,iDAAY,GAAZ,UAAa,WAAe;QAC1B,0CAA0C;QAC1C,iEAAiE;QACjE,yCAAyC;QACzC,IAAI,CAAC,WAAW,GAAC,WAAW,CAAC;QAC7B,IAAI,KAAK,GAAC,CAAC,WAAW,GAAC,CAAC,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC;QACxC,IAAI,GAAG,GAAC,KAAK,GAAC,IAAI,CAAC,QAAQ,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,EAAC,GAAG,CAAC,CAAC;IACnD,CAAC;IAGH,wCAAwC;IACtC,iDAAY,GAAZ;QAEE,wCAAwC;QAF1C,iBAcC;QATC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,WAAC;YACrC,KAAI,CAAC,YAAY,GAAG,CAAC,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC,EAAD,CAAC,CAAC;iBAC5B,MAAM,CAAC,WAAC,IAAI,QAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,KAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,EAA5D,CAA4D,CAAC,CAAC;YACjF,0CAA0C;YAC1C,yDAAyD;YACzD,KAAI,CAAC,QAAQ,GAAC,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;YACvD,KAAI,CAAC,QAAQ,GAAC,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC;QACzC,CAAC,CAAC,CAAC;IAEL,CAAC;IAEH,oCAAoC;IAClC,mDAAc,GAAd,UAAe,KAAqB;QAElC,IAAI,KAAK,GAAC,CAAC,IAAI,CAAC,WAAW,GAAC,CAAC,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC;QAC7C,IAAI,GAAG,GAAC,KAAK,GAAC,IAAI,CAAC,QAAQ,CAAC;QAC5B,kFAAkF;QAClF,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAC,GAAG,CAAC,CAAC;IAChC,CAAC;IAEH,iCAAiC;IAC5B,gDAAW,GAAX;QAEE,6BAA6B;QAC7B,IAAI,CAAC,YAAY,GAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAC,IAAE,QAAC,EAAD,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAC,CAAC;YAAI,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,GAAC,CAAC,CAAC,KAAK,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC;YACvF,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,GAAC,CAAC,CAAC,KAAK,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACpC,IAAI;gBAAC,MAAM,CAAC,CAAC,CAAC;QAAC,CAAC,CAAC,CAAC;QAClB,IAAI,CAAC,QAAQ,GAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACzD,CAAC;IAEN,sCAAsC;IACtC,uDAAkB,GAAlB;QAEE,IAAI,CAAC,YAAY,GAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAC,IAAE,QAAC,EAAD,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAC,CAAC;YAAI,EAAE,CAAC,CAAC,CAAC,CAAC,YAAY,GAAC,CAAC,CAAC,YAAY,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC;YACrG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,YAAY,GAAC,CAAC,CAAC,YAAY,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAClD,IAAI;gBAAC,MAAM,CAAC,CAAC,CAAC;QAAC,CAAC,CAAC,CAAC;QAElB,IAAI,CAAC,QAAQ,GAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACzD,CAAC;IAED,sCAAsC;IACtC,uDAAkB,GAAlB;QAEE,IAAI,CAAC,YAAY,GAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAC,IAAE,QAAC,EAAD,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAC,CAAC;YAAI,EAAE,CAAC,CAAC,CAAC,CAAC,YAAY,GAAC,CAAC,CAAC,YAAY,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC;YACrG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,YAAY,GAAC,CAAC,CAAC,YAAY,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAClD,IAAI;gBAAC,MAAM,CAAC,CAAC,CAAC;QAAC,CAAC,CAAC,CAAC;QAClB,IAAI,CAAC,QAAQ,GAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACzD,CAAC;IA5GY,0BAA0B;QALtC,wEAAS,CAAC;YACN,QAAQ,EAAE,oBAAoB;;YAE9B,SAAS,EAAE,CAAC,uFAAmB,CAAC;SACpC,CAAC;yCAamC,+FAAc,EAAiB,uFAAmB;OAZ1E,0BAA0B,CA+GtC;IAAD,iCAAC;CAAA;AA/GsC;;;;;;;;ACnBvC,u8B;;;;;;;;;;;;ACA+C;AAC4B;AAClC;AACzC,4CAA4C;AAC5C,sCAAsC;AACtC,+EAAc,EAAE,CAAC;AACjB,yGAAsB,EAAE,CAAC,eAAe,CAAC,8DAAS,CAAC,CAAC;;;;;;;;;;ACiCpD;AAAA;IAUE,uBAAa,UAAiB,EAC9B,YAAmB,EACnB,YAAmB,EACnB,KAAY,EACZ,UAAiB,EACjB,SAAiB,EACjB,QAAgB;QAEd,IAAI,CAAC,UAAU,GAAC,UAAU,CAAC;QAC3B,IAAI,CAAC,YAAY,GAAC,YAAY,CAAC;QAC/B,IAAI,CAAC,YAAY,GAAC,YAAY,CAAC;QAC/B,IAAI,CAAC,KAAK,GAAC,KAAK,CAAC;QACjB,IAAI,CAAC,UAAU,GAAC,UAAU,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IACH,oBAAC;AAAD,CAAC;;AAED;IA2BE,2BAAa,UAAkB,EACzB,IAAa,EACjB,QAAiB,EACjB,YAAqB,EACrB,UAAmB,EACnB,SAAkB,EAClB,SAAkB,EAClB,UAAmB,EACnB,WAAoB,EACpB,UAAmB,EACnB,KAAc,EACd,eAAwB,EACxB,YAAqB,EACrB,cAAuB,EACvB,cAAuB,EACvB,OAAgB,EAChB,SAAkB,EAClB,YAAqB,EACrB,UAAmB,EACnB,KAAc,EACd,WAAoB,EACpB,WAAoB,EACpB,QAAiB,EACjB,eAAwB;QAEtB,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,UAAU,IAAI,CAAC,CAAC;QAChD,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,QAAQ,IAAI,EAAE,CAAC;QAC3C,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,UAAU,IAAI,EAAE,CAAC;QACjD,IAAI,CAAC,YAAY,GAAG,YAAY,IAAI,YAAY,IAAI,EAAE,CAAC;QACvD,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,SAAS,IAAI,EAAE,CAAC;QAC9C,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,SAAS,IAAI,EAAE,CAAC;QAC9C,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,UAAU,IAAI,EAAE,CAAC;QACjD,IAAI,CAAC,WAAW,GAAG,WAAW,IAAI,WAAW,IAAI,EAAE,CAAC;QACpD,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,UAAU,IAAI,EAAE,CAAC;QACjD,IAAI,CAAC,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,EAAE,CAAC;QAClC,IAAI,CAAC,eAAe,GAAG,eAAe,IAAI,eAAe,IAAI,EAAE,CAAC;QAChE,IAAI,CAAC,YAAY,GAAG,YAAY,IAAI,YAAY,IAAI,EAAE,CAAC;QACvD,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,cAAc,IAAI,EAAE,CAAC;QAC7D,IAAI,CAAC,OAAO,GAAG,OAAO,IAAI,OAAO,IAAI,EAAE,CAAC;QACxC,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,SAAS,IAAI,EAAE,CAAC;QAC9C,IAAI,CAAC,YAAY,GAAG,YAAY,IAAI,YAAY,IAAI,EAAE,CAAC;QACvD,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,UAAU,IAAI,EAAE,CAAC;QACjD,IAAI,CAAC,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,EAAE,CAAC;QAClC,IAAI,CAAC,WAAW,GAAG,WAAW,IAAI,WAAW,IAAI,EAAE,CAAC;QACpD,IAAI,CAAC,WAAW,GAAG,WAAW,IAAI,WAAW,IAAI,EAAE,CAAC;QACpD,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,QAAQ,IAAI,EAAE,CAAC;QAC3C,IAAI,CAAC,eAAe,GAAG,eAAe,IAAI,eAAe,IAAI,EAAE,CAAC;IAElE,CAAC;IAIL,wBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;ACnJ6C;AAI9C;IAOK;QAEI,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QACpB,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;IAC3B,CAAC;IACD,sBAAI,6CAAU;aAAd;YACK,kDAAkD;YAClD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QAC5B,CAAC;aACD,UAAe,KAAY;YACtB,IAAI,CAAC,UAAU,GAAC,KAAK,CAAC;YACtB,sDAAsD;QAC5D,CAAC;;;OAJC;IAMF,sBAAI,+CAAY;aAAhB;YACI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;QAC7B,CAAC;aACD,UAAiB,KAAa;YAC1B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC9B,CAAC;;;OAHA;IAvBQ,qBAAqB;QADjC,yEAAU,EAAE;;OACA,qBAAqB,CA6BjC;IAAD,4BAAC;CAAA;AA7BiC;;;;;;;;;;;;;;;;;;;;;ACJY;AACK;AAenD,wEAAwE;AAExE,mDAAmD;AAKnD;IAGE,kCAAkC;IAElC,yBAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;QAH3B,YAAO,GAAC,cAAc,CAAC;IAGO,CAAC;IACrC,gCAAgC;IAChC,iCAAO,GAAP;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAmB,IAAI,CAAC,OAAO,CAAC,CAAC;;;;YAIjD,CAAC,qBAAqB;IAE9B,CAAC;IACL,2BAA2B;IAC3B,kEAAkE;IAE9D,qCAAW,GAAX,UAAY,QAAQ;QAChB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAuB,IAAI,CAAC,OAAO,GAAG,GAAG,GAAG,QAAQ,CAAC;aAEpE,OAAO,CAAC,WAAC,IAAE,QAAC,EAAD,CAAC,CAAC,CAAC,+DAA8D;QACjF,0DAA0D;QAC1D,8BAA8B;IAClC,CAAC;IAEK,qCAAW,GAAnB,UAAoB,KAAU;QAC5B,sEAAsE;QACtE,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAChD,CAAC;IA7BU,eAAe;QAD3B,yEAAU,EAAE;yCAMc,wEAAU;OALxB,eAAe,CA8B3B;IAAD,sBAAC;CAAA;AA9B2B;;;;;;;;;;;;;;;;;;;;;;;;;ACvBkB;AAII;AAEb;AACN;AACE;AAKjC;IAIE,wBAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;QAF3B,YAAO,GAAC,aAAa,CAAC;IAEQ,CAAC;IAEvC,gCAAO,GAAP;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAkB,IAAI,CAAC,OAAO,CAAC,CAAC;QACpD,cAAc;QACd,+EAA+E;QAC/E,2BAA2B;IAC/B,CAAC;IAEO,oCAAW,GAAnB,UAAoB,KAAU;QAC5B,sEAAsE;QACtE,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAClD,CAAC;IAhBY,cAAc;QAD1B,yEAAU,EAAE;yCAKc,wEAAU;OAJxB,cAAc,CAiB1B;IAAD,qBAAC;CAAA;AAjB0B;;;;;;;;;;;;;;;;;;;;;ACbgB;AACO;AAMlD;IAEI,wBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAD5B,YAAO,GAAG,aAAa,CAAC;IACQ,CAAC;IAGzC,mCAAU,GAAV,UAAW,IAAI;QACX,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAkB,IAAI,CAAC,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC;IACrE,CAAC;IAPQ,cAAc;QAD1B,yEAAU,EAAE;yCAGiB,wEAAU;OAF3B,cAAc,CAQ1B;IAAD,qBAAC;CAAA;AAR0B;;;;;;;;;;;;;;;;;;;;;ACPgB;AACO;AAMlD;IAEI,wBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAD5B,YAAO,GAAG,aAAa,CAAC;IACQ,CAAC;IAGzC,mCAAU,GAAV,UAAW,IAAI;QACX,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAkB,IAAI,CAAC,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC;IACrE,CAAC;IAPQ,cAAc;QAD1B,yEAAU,EAAE;yCAGiB,wEAAU;OAF3B,cAAc,CAQ1B;IAAD,qBAAC;CAAA;AAR0B","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./ClientApp/$$_lazy_route_resource lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/$$_lazy_route_resource lazy\n// module id = ./ClientApp/$$_lazy_route_resource lazy recursive\n// module chunks = main","import { Component } from '@angular/core';\r\n@Component({\r\n  selector: 'my-app',\r\n  templateUrl: './inventory.component.html' //./app/\r\n})\r\nexport class AppComponent { }\r\n\n\n\n// WEBPACK FOOTER //\n// ./ClientApp/app/app.component.ts","import { NgModule, LOCALE_ID }      from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { AppComponent }   from './app.component';\r\nimport { HttpClientModule }    from '@angular/common/http';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { registerLocaleData } from '@angular/common';\r\nimport localeRu from '@angular/common/locales/ru';\r\n\r\nregisterLocaleData(localeRu);\r\n\r\n//import { InMemoryWebApiModule } from 'angular-in-memory-web-api';\r\n//import { DataDb } from './shared/data/app.data'\r\n/*import { ComputerDataDb,ComputerFullDataDb } from './shared/data/computer/computer.data'*/\r\n\r\nimport { MonitorService } from './shared/service/monitor/monitor.service';\r\nimport { ComputerService } from './shared/service/computer/computer.service';\r\nimport { ServiceService } from './shared/service/service/service.service';\r\nimport { ProductService } from './shared/service/product/product.service';\r\nimport { ComputerGetterService } from './shared/service/computer/computer.getter/computer.getter.service'\r\n\r\nimport { MonitorPaginationComponent } from './components/monitor/monitor'\r\nimport { ComputerPaginationComponent, ComputerModalContent, ServiceModalContent, ProductModalContent } from './components/computer/computer'\r\nimport { HomeComponent } from './components/home/home.component'\r\nimport { ComputerItemComponent } from './components/computer/computer.item/computer.item'\r\n\r\n@NgModule({\r\n  imports:      [ BrowserModule,HttpClientModule,\r\n  NgbModule.forRoot(),FormsModule,\r\n  RouterModule.forRoot([\r\n      { path: '',  component: HomeComponent },\r\n      { path: 'computer',  component: ComputerPaginationComponent },\r\n      { path: 'monitor',  component: MonitorPaginationComponent }\r\n    ])\r\n ],\r\n    declarations: [AppComponent, MonitorPaginationComponent, ComputerPaginationComponent, HomeComponent, ComputerItemComponent, ComputerModalContent, ServiceModalContent, ProductModalContent ],\r\n    providers: [MonitorService, ComputerService, ComputerGetterService, ServiceService, ProductService,{provide: LOCALE_ID, useValue: \"ru\"}],\r\n  bootstrap:    [ AppComponent ],\r\n    entryComponents: [ComputerModalContent, ServiceModalContent, ProductModalContent]\r\n})\r\nexport class AppModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// ./ClientApp/app/app.module.ts","module.exports = \"<div class=\\\"row justify-content-md-center\\\">\\r\\n    \\r\\n    <div class=\\\"col-md-6 mb-2\\\">\\r\\n        <div class=\\\"card  border-info text-center mx-auto w-100\\\">\\r\\n            <div class=\\\"card-body\\\">\\r\\n                <h4 class=\\\"card-title\\\">Компьютеры</h4>\\r\\n                <p class=\\\"card-text\\\">Находящиеся в использовании</p>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    \\r\\n </div>\\r\\n\\r\\n    <form class=\\\"form-inline\\\">\\r\\n        \\r\\n            <button class=\\\"btn btn-info\\\" (click)=\\\"containsName()\\\">Выбрать</button>\\r\\n        \\r\\n\\r\\n        <div class=\\\"form-group  mb-2 mx-auto w-100\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model\\\" [ngbTypeahead]=\\\"search\\\" name=\\\"search\\\" />\\r\\n        </div>\\r\\n\\r\\n    </form>\\r\\n    <ngb-pagination [collectionSize]=\\\"allItems\\\" [(page)]=\\\"page\\\" [pageSize]=\\\"pageSize\\\"\\r\\n                    (pageChange)=\\\"onPageChange($event)\\\"></ngb-pagination>\\r\\n\\r\\n    <table class=\\\"table table-hover\\\">\\r\\n        <thead>\\r\\n            <tr>\\r\\n                <th>ИД</th>\\r\\n                <th (click)=\\\"sortByModel()\\\">Модель</th>\\r\\n                <th (click)=\\\"sortBySerailNumber()\\\">Серийный номер</th>\\r\\n                <th (click)=\\\"sortByComputerName()\\\">Имя компьютера</th>\\r\\n                <th (click)=\\\"sortByUserName()\\\"> Имя пользователя</th>\\r\\n                <th (click)=\\\"sortByIpAddress()\\\">IP адрес</th>\\r\\n                <th>Дата обновления</th>\\r\\n                <th></th>\\r\\n            </tr>\\r\\n        </thead>\\r\\n        <tbody>\\r\\n            <tr *ngFor=\\\"let item of itemView\\\"\\r\\n                table-item [computerModel]=\\\"item\\\" (detailed)=\\\"onDetail($event)\\\" (serviced)=\\\"onService($event)\\\" (producted)=\\\"onProduct($event)\\\"></tr>\\r\\n        </tbody>\\r\\n    </table>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/components/computer/computer.html\n// module id = ./ClientApp/app/components/computer/computer.html\n// module chunks = main","module.exports = \"<td>{{computerModel.computerId}}</td>\\r\\n<td>{{computerModel.model}}</td>\\r\\n<td>{{computerModel.serialNumber}}</td>\\r\\n<td>{{computerModel.computerName}}</td>\\r\\n<td>{{computerModel.userName}}</td>\\r\\n<td>{{computerModel.ipAddress}}</td>\\r\\n<td>{{computerModel.lastUpdate | date: 'dd.MM.yyyy'}} {{computerModel.lastUpdate | date: 'mediumTime'}}</td>\\r\\n<td><button class=\\\"btn btn-outline-info\\\" (click)=\\\"products(computerModel.computerId)\\\">Продукты</button> </td>\\r\\n<td><button class=\\\"btn btn-outline-info\\\" (click)=\\\"services(computerModel.computerId)\\\">Службы</button> </td>\\r\\n<td><button class=\\\"btn btn-outline-info\\\" (click)=\\\"detail(computerModel.computerId)\\\">Подробнее</button> </td>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/components/computer/computer.item/computer.item.html\n// module id = ./ClientApp/app/components/computer/computer.item/computer.item.html\n// module chunks = main","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { IComputerModel, IComputerFullModel } from '../../../shared/model/computer/computer.model';\r\nimport { IServiceModel } from \"../../../shared/model/service/service.model\";\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: '[table-item]',\r\n  templateUrl: 'computer.item.html' //./app/components/computer/computer.item/\r\n})\r\nexport class ComputerItemComponent\r\n{\r\n  itemId:number;\r\n    @Input() computerModel: IComputerModel;\r\n    @Input() serviceModel:IServiceModel;\r\n    @Output() detailed: EventEmitter<IComputerModel>;\r\n    @Output() serviced: EventEmitter<IComputerModel>;\r\n    @Output() producted: EventEmitter<IComputerModel>;\r\n\r\n  constructor()\r\n  {\r\n    this.itemId=0;\r\n      this.detailed = new EventEmitter<IComputerModel>();\r\n      this.serviced = new EventEmitter<IComputerModel>();\r\n      this.producted = new EventEmitter<IComputerModel>();\r\n  }\r\n\r\n  detail(itemId:number)\r\n  {\r\n    this.itemId=itemId;\r\n      console.log(this.itemId);\r\n      console.log(this.computerModel.computerName);\r\n      console.log(this.computerModel.serialNumber);\r\n    this.detailed.emit(this.computerModel);\r\n  }\r\n\r\n    services(itemId: number) {\r\n        this.itemId = itemId;\r\n        this.serviced.emit(this.computerModel);\r\n    }\r\n\r\n    products(itemId: number) {\r\n        this.itemId = itemId;\r\n        this.producted.emit(this.computerModel);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./ClientApp/app/components/computer/computer.item/computer.item.ts","module.exports = \"<div class=\\\"modal-header\\\">\\r\\n    <div class=\\\"card  text-white bg-primary mx-auto text-center w-75\\\">\\r\\n        <div class=\\\"card-body\\\">\\r\\n            <h4 class=\\\"card-title\\\">Компьютер </h4>\\r\\n            <h3 class=\\\"card-text\\\">{{computerFullModel.computerName}}</h3>\\r\\n        </div>\\r\\n     </div>\\r\\n</div>\\r\\n<div class=\\\"modal-body\\\">\\r\\n  <h1></h1>\\r\\n  <table class=\\\"table table-bordered\\\">\\r\\n      <tr>\\r\\n          <td>Серийный номер</td>\\r\\n          <td>{{computerFullModel.serialNumber}}</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n          <td>BIOS</td>\\r\\n          <td>{{computerFullModel.bios}}</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n          <td>Модель</td>\\r\\n          <td>{{computerFullModel.model}}</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n          <td>ОС</td>\\r\\n          <td>{{computerFullModel.operatingSystem}}</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n          <td>Память (ОЗУ)</td>\\r\\n          <td>{{computerFullModel.physicalMemory}}</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n          <td>Процессор</td>\\r\\n          <td>{{computerFullModel.processor}}</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n          <td>HDD</td>\\r\\n          <td>{{computerFullModel.diskDrive}}</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n          <td>Видеоконтроллер</td>\\r\\n          <td>{{computerFullModel.videoController}}</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n          <td>СОМ порт</td>\\r\\n          <td>{{computerFullModel.serialPort}}</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n          <td>Сетевая карта</td>\\r\\n          <td>{{computerFullModel.networkAdapter}}</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n          <td>CD-ROM</td>\\r\\n          <td>{{computerFullModel.cdromDrive}}</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n          <td>Звуковая карта</td>\\r\\n          <td>{{computerFullModel.soundDevice}}</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n          <td>Параллельный порт</td>\\r\\n          <td>{{computerFullModel.parallelPort}}</td>\\r\\n      </tr>\\r\\n\\r\\n      <tr>\\r\\n          <td>Имя пользователя</td>\\r\\n          <td>{{computerFullModel.userName}}</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n          <td>Пользователи</td>\\r\\n          <td>{{computerFullModel.userAccount}}</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n          <td>Общие ресурсы</td>\\r\\n          <td>{{computerFullModel.share}}</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n          <td>Логические диски</td>\\r\\n          <td>{{computerFullModel.logicalDisk}}</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n          <td>IP адрес</td>\\r\\n          <td>{{computerFullModel.ipAddress}}</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n          <td>MAC адрес</td>\\r\\n          <td>{{computerFullModel.macAddress}}</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n          <td>Время загрузки</td>\\r\\n          <td>{{computerFullModel.bootupTime | date: 'dd.MM.yyyy'}} {{computerFullModel.bootupTime | date: 'mediumTime'}}</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n          <td>Последнее обновление</td>\\r\\n          <td>{{computerFullModel.lastUpdate | date: 'dd.MM.yyyy'}} {{computerFullModel.lastUpdate | date: 'mediumTime'}}</td>\\r\\n      </tr>\\r\\n  </table>\\r\\n</div>\\r\\n<div class=\\\"modal-footer\\\">\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"activeModal.close()\\\">Закрыть</button>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/components/computer/computer.modal.html\n// module id = ./ClientApp/app/components/computer/computer.modal.html\n// module chunks = main","import { Component, OnInit,Input, OnDestroy } from '@angular/core';\r\nimport {NgbPaginationConfig} from '@ng-bootstrap/ng-bootstrap';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { NgbModal, ModalDismissReasons, NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\nimport { ComputerService } from '../../shared/service/computer/computer.service';\r\nimport { ServiceService } from '../../shared/service/service/service.service';\r\nimport { ProductService } from '../../shared/service/product/product.service';\r\nimport { ComputerGetterService } from '../../shared/service/computer/computer.getter/computer.getter.service'\r\n\r\nimport { IComputerModel, ComputerFullModel } from '../../shared/model/computer/computer.model';\r\nimport { IServiceModel } from '../../shared/model/service/service.model';\r\nimport { IProductModel } from '../../shared/model/product/product.model';\r\n\r\n//import 'rxjs/add/operator/map';\r\n//import 'rxjs/add/operator/debounceTime';\r\n//import 'rxjs/add/operator/distinctUntilChanged';\r\n//import 'rxjs/add/operator/mergeMap';\r\n//import 'rxjs/add/observable/from';\r\n\r\nimport { map } from 'rxjs/operators/map';\r\n\r\n\r\n\r\n/////////////////// Modal window \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\r\n@Component({\r\n  selector: 'modal-content',\r\n  templateUrl: \"computer.modal.html\", //./app/components/computer/\r\n  providers: [ComputerService]\r\n})\r\nexport class ComputerModalContent implements OnDestroy\r\n{\r\n  @Input() computerItem:any;\r\n    computerFullModel: ComputerFullModel;\r\n    subscription: Subscription;\r\n\r\n    constructor(public activeModal: NgbActiveModal, private computerGetterService: ComputerGetterService,\r\n        private computerService: ComputerService) {\r\n\r\n        this.computerFullModel = new ComputerFullModel(); //0, \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\r\n      //this.computerFullModel = [];\r\n  \r\n      console.log(\"computerFullModel.serialNumber=\" + this.computerFullModel.serialNumber);\r\n      \r\n        this.subscription = this.computerService.getFullData(this.computerGetterService.ComputerId).subscribe(m => {\r\n          this.computerFullModel = m;\r\n          console.log(\"Constructor ********************************\");\r\n          //console.log(\"m[0] computerName=\" + m.computerName);\r\n          //console.log(\"computerFullModel computerName=\" + this.computerFullModel.computerName);\r\n\r\n      });  //editet by me\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription.unsubscribe();\r\n    }\r\n    \r\n\r\n}\r\n\r\n/////// Service modal window \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\r\n@Component(\r\n    {\r\n        selector: 'modall-content',\r\n        templateUrl: 'service.modal.html',\r\n        providers:[ServiceService]\r\n    })\r\nexport class ServiceModalContent implements OnDestroy {\r\n    @Input() computerItem: any;\r\n    serviceModel: IServiceModel[];\r\n    computerName: string;\r\n    subscription: Subscription;\r\n\r\n    constructor(public activeModal: NgbActiveModal,\r\n        private computerGetterService: ComputerGetterService,\r\n        private serviceService: ServiceService) {\r\n        //this.serviceModel = new ServiceModel();\r\n        this.computerName = this.computerGetterService.computerName;\r\n        this.subscription = this.serviceService.getService(this.computerGetterService.ComputerId).subscribe(m => {\r\n            this.serviceModel = m;\r\n        });\r\n    }\r\n    \r\n    ngOnDestroy() {\r\n        this.subscription.unsubscribe();\r\n    }\r\n\r\n    sortByName(): void {\r\n        this.serviceModel = this.serviceModel.map(m => m).sort((a, b) => {\r\n            if (a.name > b.name) return 1;\r\n            else if (a.name < b.name) return -1;\r\n            else return 0;\r\n        });\r\n    }\r\n    sortByDisplayName(): void {\r\n        this.serviceModel = this.serviceModel.map(m => m).sort((a, b) => {\r\n            if (a.displayName > b.displayName) return 1;\r\n            else if (a.displayName < b.displayName) return -1;\r\n            else return 0;\r\n        });\r\n    }\r\n    sortByStartMode(): void {\r\n        this.serviceModel = this.serviceModel.map(m => m).sort((a, b) => {\r\n            if (a.startMode > b.startMode) return 1;\r\n            else if (a.startMode < b.startMode) return -1;\r\n            else return 0;\r\n        });\r\n    }\r\n    sortByState(): void {\r\n        this.serviceModel = this.serviceModel.map(m => m).sort((a, b) => {\r\n            if (a.state > b.state) return 1;\r\n            else if (a.state < b.state) return -1;\r\n            else return 0;\r\n        });\r\n    }\r\n}\r\n\r\n\r\n/////// Product modal window \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\r\n@Component(\r\n    {\r\n        selector: 'modalp-content',\r\n        templateUrl: 'product.modal.html',\r\n        providers: [ProductService]\r\n    })\r\nexport class ProductModalContent implements OnDestroy {\r\n    //@Input() computerItem: any;\r\n    productModel: IProductModel[];\r\n    computerName:string;\r\n    subscription: Subscription;\r\n\r\n    constructor(public activeModal: NgbActiveModal,\r\n        private computerGetterService: ComputerGetterService,\r\n        private productService: ProductService) {\r\n        //this.serviceModel = new ServiceModel();\r\n        this.computerName = this.computerGetterService.computerName;\r\n        this.subscription = this.productService.getProduct(this.computerGetterService.ComputerId).subscribe(m => {\r\n            this.productModel = m;\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription.unsubscribe();\r\n    }\r\n\r\n    sortByCaption(): void {\r\n        this.productModel = this.productModel.map(m => m).sort((a, b) => {\r\n            if (a.caption > b.caption) return 1;\r\n            else if (a.caption < b.caption) return -1;\r\n            else return 0;\r\n        });\r\n        \r\n    }\r\n\r\n    sortByVersion(): void {\r\n        this.productModel = this.productModel.map(m => m).sort((a, b) => {\r\n            if (a.version > b.version) return 1;\r\n            else if (a.version < b.version) return -1;\r\n            else return 0;\r\n        });\r\n\r\n    }\r\n\r\n    sortByInstallDate(): void {\r\n        this.productModel = this.productModel.map(m => m).sort((a, b) => {\r\n            if (a.installDate > b.installDate) return 1;\r\n            else if (a.installDate < b.installDate) return -1;\r\n            else return 0;\r\n        });\r\n\r\n    }\r\n}\r\n\r\n@Component({\r\n     selector: 'computer-pagination',\r\n     templateUrl: 'computer.html',\r\n     providers: [NgbPaginationConfig]\r\n})\r\nexport class ComputerPaginationComponent implements OnInit\r\n{\r\n  computerModel:IComputerModel[];\r\n  allItems:number;\r\n  page:number=1;\r\n    itemView: IComputerModel[];\r\n  pageSize:number;\r\n  search:any;\r\n  currentPage:number;\r\n  model:string;\r\n\r\n/////   Constructor \\\\\\\\\\\\\\\\\\\r\n    constructor(private computerService: ComputerService, private config: NgbPaginationConfig,\r\n        private computerGetterService: ComputerGetterService, private computerModalService: NgbModal, private serviceService: ServiceService,\r\n        private serviceModalService: NgbModal, private productModalService: NgbModal)\r\n  {\r\n    this.computerModel=[];\r\n    this.pageSize=15;\r\n    this.currentPage=1;\r\n  }\r\n\r\n//// Инициализация при старте страницы\r\n  ngOnInit(): void\r\n  {\r\n    //this.monitorModel=this.monitorService.getData();\r\n    this.computerService.getData().subscribe(t=> {\r\n        //this.computerModel = t.map(m => m);\r\n        this.computerModel = t; // .map(m => m.js); //      t as IComputerModel[];\r\n      //.filter(f=>f.model.toUpperCase().indexOf(this.model.toUpperCase())>=0)\r\n      //.map(m=>{console.log(\"m=\"+m);return m});\r\n        console.log(\"inner this.computerModel computerId=\" + this.computerModel[0].computerId);\r\n        console.log(\"inner this.computerModel computerName=\" + this.computerModel[0].computerName);\r\n        console.log(\"inner this.computerModel serialNumber=\" + this.computerModel[0].serialNumber);\r\n        this.itemView = this.computerModel.slice(0, this.pageSize);\r\n        console.log(\"inner this.itemView computerId=\" + this.itemView[0].computerId);\r\n        console.log(\"inner this.itemView computerName=\" + this.itemView[0].computerName);\r\n        console.log(\"inner this.itemView serialNumber=\" + this.itemView[0].serialNumber);\r\n      this.allItems=this.computerModel.length;\r\n    });\r\n\r\n   // console.log(\"allItems=\"+this.allItems);\r\n\r\n    this.search=(text$:Observable<string>)=>text$.debounceTime(200).distinctUntilChanged()\r\n        .map((term: string) => term.length < 2 ? [] : this.computerModel\r\n        .map(m=>m.model)\r\n      //.map(m=>{console.log(\"---> m=\" + m.model); return m.model;})\r\n        .filter(v=>new RegExp(term,'gi').test(v)).splice(0,10));\r\n\r\n    }\r\n\r\n///// Событие при нажатии кнопки Подробнее\r\n    onDetail(model:IComputerModel)\r\n    {\r\n      //console.log(model);\r\n      this.computerGetterService.ComputerId=model.computerId;\r\n        this.computerModalService.open(ComputerModalContent, { size: 'lg' });\r\n        /*.result\r\n        .then((result) => console.log(\"onDetail result=\"+ result), () => console.log(\"cancel\"));*/\r\n    }\r\n\r\n    onService(model: IComputerModel) {\r\n        this.computerGetterService.ComputerId = model.computerId;\r\n        //this.serviceService.getService(3690).subscribe(m => {});\r\n        this.serviceModalService.open(ServiceModalContent, { size: 'lg' });\r\n    }\r\n\r\n    onProduct(model: IComputerModel) {\r\n        this.computerGetterService.ComputerId = model.computerId;\r\n        this.computerGetterService.ComputerName = model.computerName;\r\n        //this.serviceService.getService(3690).subscribe(m => {});\r\n        this.productModalService.open(ProductModalContent, { size: 'lg' });\r\n    }\r\n\r\n\r\n\r\n    ////// Событие при изменении страницы Pagination\r\n      onPageChange(currentPage:any):void{\r\n       // console.log(\"currentPage=\"+currentPage);\r\n       // console.log(\"this.computerModel.length=\"+this.computerModel.length);\r\n       // console.log(\"allItems=\"+this.allItems);\r\n        this.currentPage=currentPage;\r\n        let begin=(currentPage-1)*this.pageSize;\r\n        let end=begin+this.pageSize;\r\n        this.itemView=this.computerModel.slice(begin,end);\r\n      }\r\n\r\n      ////// Typeahead - поиск по имени модели\r\n        containsName():void\r\n        {\r\n          console.log(\"computer.ts containsName this.model=\"+this.model);\r\n\r\n\r\n          this.computerService.getData().subscribe(t=> {\r\n              this.computerModel = t.map(m => m)\r\n                  .filter(f => f.model.toUpperCase().indexOf(this.model.toUpperCase()) >= 0);\r\n            //.map(m=>{console.log(\"m=\"+m);return m});\r\n           // console.log(\"inner this.computerModel=\"+this.computerModel);\r\n            this.itemView=this.computerModel.slice(0,this.pageSize);\r\n            this.allItems=this.computerModel.length;\r\n          });  // edited by me\r\n\r\n      }\r\n\r\n        ///// Вернуть отсортированную модель\r\n        getSortedModel(model: IComputerModel[]): IComputerModel[] {\r\n            let begin = (this.currentPage - 1) * this.pageSize;\r\n            let end = begin + this.pageSize;\r\n           // console.log(\"this.currentPage=\" + this.currentPage + \", begin=\" + begin + \", end=\" + end);\r\n            return model.slice(begin, end);\r\n        }\r\n\r\n        ///// Сортировка по имени модели\r\n        sortByModel(): void {\r\n            console.log(\"click Model\");\r\n            this.computerModel = this.computerModel.map(m => m).sort((a, b) => {\r\n                if (a.model > b.model) return 1;\r\n                else if (a.model < b.model) return -1;\r\n                else return 0;\r\n            });\r\n            this.itemView = this.getSortedModel(this.computerModel);\r\n        }\r\n\r\n        //////  Сортировка по серийному номеру\r\n        sortBySerailNumber(): void {\r\n            this.computerModel = this.computerModel.map(m => m).sort((a, b) => {\r\n                if (a.serialNumber > b.serialNumber) return 1;\r\n                else if (a.serialNumber < b.serialNumber) return -1;\r\n                else return 0;\r\n            });\r\n\r\n            this.itemView = this.getSortedModel(this.computerModel);\r\n        }\r\n\r\n        //////  Сортировка по имени компьютера\r\n        sortByComputerName(): void {\r\n            this.computerModel = this.computerModel.map(m => m).sort((a, b) => {\r\n                if (a.computerName > b.computerName) return 1;\r\n                else if (a.computerName < b.computerName) return -1;\r\n                else return 0;\r\n            });\r\n            this.itemView = this.getSortedModel(this.computerModel);\r\n        }\r\n\r\n        //////  Сортировка по имени компьютера\r\n        sortByIpAddress(): void {\r\n            this.computerModel = this.computerModel.map(m => m).sort((a, b) => {\r\n                if (a.ipAddress > b.ipAddress) return 1;\r\n                else if (a.ipAddress < b.ipAddress) return -1;\r\n                else return 0;\r\n            });\r\n            this.itemView = this.getSortedModel(this.computerModel);\r\n        }\r\n\r\n    ///// Sorted by user name \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\r\n    sortByUserName(): void {\r\n        this.computerModel = this.computerModel.map(m => m).sort((a, b) => {\r\n            if (a.userName > b.userName) return 1;\r\n            else if (a.userName < b.userName) return -1;\r\n            else return 0;\r\n        });\r\n        this.itemView = this.getSortedModel(this.computerModel);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./ClientApp/app/components/computer/computer.ts","module.exports = \"<div class=\\\"modal-header\\\">\\r\\n    <div class=\\\"card  text-white bg-primary mx-auto text-center w-75\\\">\\r\\n\\r\\n        <h3 class=\\\"card-text\\\">Компьютер </h3>\\r\\n        <h3 class=\\\"card-title\\\">{{computerName}}</h3>\\r\\n\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"modal-body\\\">\\r\\n    <table class=\\\"table table-bordered table-hover\\\">\\r\\n        <tr>\\r\\n            \\r\\n            <th (click)=\\\"sortByCaption()\\\">Описание</th>\\r\\n            <th (click)=\\\"sortByVersion()\\\">Версия</th>\\r\\n            <th (click)=\\\"sortByInstallDate()\\\">Дата инсталляции</th>\\r\\n        </tr>\\r\\n        <tr *ngFor=\\\"let item of productModel\\\">\\r\\n            <td>{{item.caption}}</td>\\r\\n            <td>{{item.version}}</td>\\r\\n            <td>{{item.installDate}}</td>\\r\\n        </tr>\\r\\n    </table>\\r\\n</div>\\r\\n<div class=\\\"modal-footer\\\">\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"activeModal.close()\\\">Закрыть</button>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/components/computer/product.modal.html\n// module id = ./ClientApp/app/components/computer/product.modal.html\n// module chunks = main","module.exports = \"<div class=\\\"modal-header\\\">\\r\\n    <div class=\\\"card text-white bg-primary mx-auto text-center w-75\\\">\\r\\n        \\r\\n        <h3 class=\\\"card-text\\\">Компьютер </h3>\\r\\n        <h3 class=\\\"card-title\\\">{{computerName}}</h3>\\r\\n        \\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"modal-body\\\">\\r\\n    <table class=\\\"table table-bordered table-hover\\\">\\r\\n        <tr>\\r\\n            <th (click)=\\\"sortByName()\\\">Имя</th>\\r\\n            <th (click)=\\\"sortByDisplayName()\\\">Описание</th>\\r\\n            <th (click)=\\\"sortByStartMode()\\\">Режим</th>\\r\\n            <th (click)=\\\"sortByState()\\\">Состояние</th>\\r\\n        </tr>\\r\\n        <tr *ngFor=\\\"let item of serviceModel\\\">\\r\\n            <td>{{item.name}}</td>\\r\\n            <td>{{item.displayName}}</td>\\r\\n            <td>{{item.startMode}}</td>\\r\\n            <td>{{item.state}}</td>\\r\\n        </tr>\\r\\n    </table>\\r\\n</div>\\r\\n<div class=\\\"modal-footer\\\">\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"activeModal.close()\\\">Закрыть</button>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/components/computer/service.modal.html\n// module id = ./ClientApp/app/components/computer/service.modal.html\n// module chunks = main","module.exports = \"  <div class=\\\"jumbotron jumbotron-fluid\\\">\\r\\n    <h1>Hero</h1>\\r\\n  </div>\\r\\n\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/components/home/home.component.html\n// module id = ./ClientApp/app/components/home/home.component.html\n// module chunks = main","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'home-component',\r\n  templateUrl: 'home.component.html' //./app/components/home/\r\n})\r\n\r\nexport class HomeComponent{}\r\n\n\n\n// WEBPACK FOOTER //\n// ./ClientApp/app/components/home/home.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"card card-block card-outline-info mb-5 text-center\\\">\\r\\n        <h4 class=\\\"card-title\\\">Мониторы</h4>\\r\\n        <p class=\\\"card-text\\\">Находящиеся в использовании</p>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"form-group row\\\">\\r\\n  <div class=\\\"col-md-2\\\">\\r\\n    <button class=\\\"btn btn-info\\\" (click)=\\\"containsName()\\\">Выбрать</button>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"col-md-10\\\">\\r\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model\\\" [ngbTypeahead]=\\\"search\\\" />\\r\\n  </div>\\r\\n\\r\\n</div>\\r\\n<ngb-pagination [collectionSize]=\\\"allItems\\\" [(page)]=\\\"page\\\" [pageSize]=\\\"pageSize\\\"\\r\\n (pageChange)=\\\"onPageChange($event)\\\"></ngb-pagination>\\r\\n\\r\\n<table class=\\\"table table-hover\\\">\\r\\n  <thead>\\r\\n    <tr>\\r\\n      <th>ИД</th>\\r\\n      <th (click)=\\\"sortByModel()\\\">Модель</th>\\r\\n      <th (click)=\\\"sortBySerailNumber()\\\">Серийный номер</th>\\r\\n      <th (click)=\\\"sortByComputerName()\\\">Имя компьютера</th>\\r\\n      <th>Дата обновления</th>\\r\\n    </tr>\\r\\n  </thead>\\r\\n  <tr *ngFor=\\\"let item of itemView\\\" >\\r\\n    <td>{{item.monitorId}}</td>\\r\\n    <td>{{item.model}}</td>\\r\\n    <td>{{item.serialNumber}}</td>\\r\\n    <td>{{item.computerName}}</td>\\r\\n    <td>{{item.lastUpdate | date: 'dd.MM.yyyy'}} {{item.lastUpdate | date: 'mediumTime'}}</td>\\r\\n\\r\\n  </tr>\\r\\n\\r\\n</table>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/components/monitor/monitor.html\n// module id = ./ClientApp/app/components/monitor/monitor.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\r\nimport {NgbPaginationConfig} from '@ng-bootstrap/ng-bootstrap';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { MonitorService } from '../../shared/service/monitor/monitor.service';\r\nimport {  IMonitorModel } from '../../shared/model/monitor/monitor.model';\r\n\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/debounceTime';\r\nimport 'rxjs/add/operator/distinctUntilChanged';\r\nimport 'rxjs/add/operator/mergeMap';\r\nimport 'rxjs/add/observable/from';\r\n\r\n\r\n@Component({\r\n     selector: 'monitor-pagination',\r\n     templateUrl: 'monitor.html', //./app/components/monitor/\r\n     providers: [NgbPaginationConfig]\r\n})\r\nexport class MonitorPaginationComponent implements OnInit\r\n{\r\n  monitorModel:IMonitorModel[];\r\n  allItems:number;\r\n  page:number=1;\r\n  itemView:any;\r\n  pageSize:number;\r\n  search:any;\r\n  currentPage:number;\r\n  model:string;\r\n\r\n/////   Constructor \\\\\\\\\\\\\\\\\\\r\n  constructor(private monitorService:MonitorService,private config: NgbPaginationConfig)\r\n  {\r\n    this.monitorModel=[];\r\n    this.pageSize=15;\r\n    this.currentPage=1;\r\n  }\r\n\r\n//// Инициализация при старте страницы\r\n  ngOnInit(): void\r\n  {\r\n    //this.monitorModel=this.monitorService.getData();\r\n    this.monitorService.getData().subscribe(t=> {\r\n        this.monitorModel = t.map(m => m);\r\n            \r\n      //.filter(f=>f.model.toUpperCase().indexOf(this.model.toUpperCase())>=0)\r\n      //.map(m=>{console.log(\"m=\"+m);return m});\r\n      //console.log(\"inner this.testModel=\"+this.monitorModel);\r\n      this.itemView=this.monitorModel.slice(0,this.pageSize);\r\n      this.allItems=this.monitorModel.length;\r\n    });\r\n\r\n    //console.log(\"allItems=\"+this.allItems);\r\n\r\n    this.search=(text$:Observable<string>)=>text$.debounceTime(200).distinctUntilChanged()\r\n    .map((term:string)=>term.length<2 ? [] : this.monitorModel\r\n      //.map(m=>{console.log(\"---> m=\" + m.model); return m.model;})\r\n        .map(m=>m.model)\r\n      .filter(v=>new RegExp(term,'gi').test(v)).splice(0,10));\r\n\r\n    }\r\n\r\n////// Событие при изменении страницы Pagination\r\n  onPageChange(currentPage:any):void{\r\n    //console.log(\"currentPage=\"+currentPage);\r\n    //console.log(\"this.testModel.length=\"+this.monitorModel.length);\r\n    //console.log(\"allItems=\"+this.allItems);\r\n    this.currentPage=currentPage;\r\n    let begin=(currentPage-1)*this.pageSize;\r\n    let end=begin+this.pageSize;\r\n    this.itemView=this.monitorModel.slice(begin,end);\r\n  }\r\n\r\n\r\n////// Typeahead - поиск по имени модели\r\n  containsName():void\r\n  {\r\n    //console.log(\"this.model=\"+this.model);\r\n\r\n\r\n    this.monitorService.getData().subscribe(t=> {\r\n        this.monitorModel = t.map(m => m)\r\n            .filter(f => f.model.toUpperCase().indexOf(this.model.toUpperCase()) >= 0);\r\n      //.map(m=>{console.log(\"m=\"+m);return m});\r\n      //console.log(\"inner this.testModel=\"+this.monitorModel);\r\n      this.itemView=this.monitorModel.slice(0,this.pageSize);\r\n      this.allItems=this.monitorModel.length;\r\n    });\r\n\r\n  }\r\n\r\n///// Вернуть отсортированную модель\r\n  getSortedModel(model:IMonitorModel[]):IMonitorModel[]\r\n  {\r\n    let begin=(this.currentPage-1)*this.pageSize;\r\n    let end=begin+this.pageSize;\r\n    //console.log(\"this.currentPage=\"+this.currentPage+\", begin=\"+begin+\", end=\"+end);\r\n    return model.slice(begin,end);\r\n  }\r\n\r\n////// Сортировка по имени модели\r\n     sortByModel():void\r\n     {\r\n       //console.log(\"click Model\");\r\n       this.monitorModel=this.monitorModel.map(m=>m).sort((a,b)=>{if (a.model>b.model) return 1;\r\n         else if (a.model<b.model) return -1;\r\n         else return 0; });\r\n         this.itemView=this.getSortedModel(this.monitorModel);\r\n     }\r\n\r\n//////  Сортировка по серийному номеру\r\nsortBySerailNumber():void\r\n{\r\n  this.monitorModel=this.monitorModel.map(m=>m).sort((a,b)=>{if (a.serialNumber>b.serialNumber) return 1;\r\n    else if (a.serialNumber<b.serialNumber) return -1;\r\n    else return 0; });\r\n\r\n    this.itemView=this.getSortedModel(this.monitorModel);\r\n}\r\n\r\n//////  Сортировка по имени компьютера\r\nsortByComputerName():void\r\n{\r\n  this.monitorModel=this.monitorModel.map(m=>m).sort((a,b)=>{if (a.computerName>b.computerName) return 1;\r\n    else if (a.computerName<b.computerName) return -1;\r\n    else return 0; });\r\n    this.itemView=this.getSortedModel(this.monitorModel);\r\n}\r\n\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./ClientApp/app/components/monitor/monitor.ts","module.exports = \"\\r\\n\\r\\n        \\r\\n            <nav class=\\\"navbar navbar-expand-lg navbar-light bg-faded\\\">\\r\\n                <a class=\\\"navbar-brand\\\" routerLink=\\\"/\\\">Главная</a>\\r\\n                <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarSupportedContent\\\">\\r\\n                    <ul class=\\\"navbar-nav mr-auto\\\">\\r\\n                        <li class=\\\"nav-item dropdown\\\">\\r\\n                            <a class=\\\"nav-link dropdown-toggle\\\" routerLink=\\\"/computer\\\">Компьютеры</a>\\r\\n                        </li>\\r\\n                        <li class=\\\"nav-item\\\">\\r\\n                            <a class=\\\"nav-link\\\" routerLink=\\\"/monitor\\\">Мониторы</a>\\r\\n                        </li>\\r\\n                       \\r\\n                    </ul>\\r\\n                </div>\\r\\n            </nav>\\r\\n        \\r\\n\\r\\n\\r\\n\\r\\n    \\r\\n        <router-outlet></router-outlet>\\r\\n        <template ngbModalContainer>\\r\\n        </template>\\r\\n    \\r\\n\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientApp/app/inventory.component.html\n// module id = ./ClientApp/app/inventory.component.html\n// module chunks = main","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { AppModule } from './app.module';\r\n//const platform = platformBrowserDynamic();\r\n//platform.bootstrapModule(AppModule);\r\nenableProdMode();\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n\n\n\n// WEBPACK FOOTER //\n// ./ClientApp/app/main.ts","export interface IComputerModel {\r\n  computerId:number;\r\n  computerName:string;\r\n  serialNumber:string;\r\n    model: string;\r\n    lastUpdate:string;\r\n  ipAddress: string;\r\n  userName: string;\r\n}\r\n\r\nexport interface IComputerFullModel {\r\n    computerId: number;\r\n    bios:string;\r\n    bootTime: string;\r\n    computerName: string;\r\n    cDROMDrive: string;\r\n    diskDrive: string;\r\n    ipAddress: string;\r\n    lastUpdate: string;\r\n    logicalDisk:string;\r\n    mACAddress: string;\r\n    model: string;\r\n    operatingSystem:string;\r\n  parallelPort: string;\r\n    physicalMemory: string;\r\n    pointingDevice: string;\r\n    printer:string;\r\n  processor: string;\r\n  serialNumber: string;\r\n    serialPort: string;\r\n    share:string;\r\n    soundDevice: string;\r\n    userAccount:string;\r\n  userName: string;\r\n  videoController: string;\r\n  \r\n}\r\n\r\n\r\nexport class ComputerModel implements IComputerModel\r\n{\r\n  computerId:number;\r\n  computerName:string;\r\n  serialNumber:string;\r\n  model:string;\r\n  lastUpdate:string;\r\n  ipAddress: string;\r\n  userName: string;\r\n\r\n  constructor (computerId:number,\r\n  computerName:string,\r\n  serialNumber:string,\r\n  model:string,\r\n  lastUpdate:string,\r\n  ipAddress: string,\r\n  userName: string)\r\n  {\r\n    this.computerId=computerId;\r\n    this.computerName=computerName;\r\n    this.serialNumber=serialNumber;\r\n    this.model=model;\r\n    this.lastUpdate=lastUpdate;\r\n    this.ipAddress = ipAddress;\r\n    this.userName = userName;\r\n  }\r\n}\r\n\r\nexport class ComputerFullModel implements IComputerFullModel\r\n{\r\n  computerId:number;\r\n    bios: string;\r\n    bootTime: string;\r\n    computerName: string;\r\n    cDROMDrive: string;\r\n    diskDrive: string;\r\n    ipAddress: string;\r\n    lastUpdate: string;\r\n    logicalDisk: string;\r\n    mACAddress: string;\r\n    model: string;\r\n    operatingSystem: string;\r\n    parallelPort: string;\r\n    physicalMemory: string;\r\n    pointingDevice: string;\r\n    printer: string;\r\n    processor: string;\r\n    serialNumber: string;\r\n    serialPort: string;\r\n    share: string;\r\n    soundDevice: string;\r\n    userAccount: string;\r\n    userName: string;\r\n    videoController: string;\r\n    \r\n  constructor (computerId?:number,\r\n        bios?: string,\r\n    bootTime?: string,\r\n    computerName?: string,\r\n    cDROMDrive?: string,\r\n    diskDrive?: string,\r\n    ipAddress?: string,\r\n    lastUpdate?: string,\r\n    logicalDisk?: string,\r\n    mACAddress?: string,\r\n    model?: string,\r\n    operatingSystem?: string,\r\n    parallelPort?: string,\r\n    physicalMemory?: string,\r\n    pointingDevice?: string,\r\n    printer?: string,\r\n    processor?: string,\r\n    serialNumber?: string,\r\n    serialPort?: string,\r\n    share?: string,\r\n    soundDevice?: string,\r\n    userAccount?: string,\r\n    userName?: string,\r\n    videoController?: string)\r\n  {\r\n      this.computerId = computerId && computerId || 0;\r\n      this.bios = bios && bios || \"\";\r\n      this.bootTime = bootTime && bootTime || \"\";\r\n      this.cDROMDrive = cDROMDrive && cDROMDrive || \"\";\r\n      this.computerName = computerName && computerName || \"\";\r\n      this.diskDrive = diskDrive && diskDrive || \"\";\r\n      this.ipAddress = ipAddress && ipAddress || \"\";\r\n      this.lastUpdate = lastUpdate && lastUpdate || \"\";\r\n      this.logicalDisk = logicalDisk && logicalDisk || \"\";\r\n      this.mACAddress = mACAddress && mACAddress || \"\";\r\n      this.model = model && model || \"\";\r\n      this.operatingSystem = operatingSystem && operatingSystem || \"\";\r\n      this.parallelPort = parallelPort && parallelPort || \"\";\r\n      this.physicalMemory = physicalMemory && physicalMemory || \"\";\r\n      this.printer = printer && printer || \"\";\r\n      this.processor = processor && processor || \"\";\r\n      this.serialNumber = serialNumber && serialNumber || \"\";\r\n      this.serialPort = serialPort && serialPort || \"\";\r\n      this.share = share && share || \"\";\r\n      this.soundDevice = soundDevice && soundDevice || \"\";\r\n      this.userAccount = userAccount && userAccount || \"\";\r\n      this.userName = userName && userName || \"\";\r\n      this.videoController = videoController && videoController || \"\";\r\n    \r\n    }\r\n\r\n   \r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./ClientApp/app/shared/model/computer/computer.model.ts","import { Injectable }    from '@angular/core';\r\nimport { Subject }    from 'rxjs/Subject';\r\n\r\n@Injectable()\r\nexport class ComputerGetterService{\r\n\r\n     //private itemId = new Subject<number>();\r\n     //itemIdO=this.itemId.asObservable();\r\n    computerId: number;\r\n    computerName:string;\r\n\r\n     constructor()\r\n     {\r\n         this.computerId = 0;\r\n         this.computerName = \"\";\r\n     }\r\n     get ComputerId():number {\r\n          //console.log('get this.itemId='+this.computerId);\r\n          return this.computerId;\r\n     }\r\n     set ComputerId(value:number){\r\n          this.computerId=value;\r\n          //console.log('set this.computerId='+this.computerId);\r\n    }\r\n\r\n    get ComputerName(): string {\r\n        return this.computerName;\r\n    }\r\n    set ComputerName(value: string) {\r\n        this.computerName = value;\r\n    }\r\n\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./ClientApp/app/shared/service/computer/computer.getter/computer.getter.service.ts","import { Injectable }    from '@angular/core';\r\nimport {  HttpClient } from '@angular/common/http';\r\n\r\nimport  { IComputerModel,IComputerFullModel } from '../../model/computer/computer.model';\r\n\r\nimport { Observable} from 'rxjs/Observable';\r\n//import 'rxjs/add/operator/toPromise';\r\n//import 'rxjs/add/operator/map';\r\n//import 'rxjs/add/operator/catch';\r\n//import 'rxjs/add/operator/filter';\r\n//import 'rxjs/add/operator/mergeAll';\r\n//import 'rxjs/add/operator/mergeMap';\r\nimport { pipe } from 'rxjs/util/pipe';\r\nimport {  filter, scan } from 'rxjs/operators';\r\nimport { map } from 'rxjs/operators/map';\r\nimport { tap } from 'rxjs/operators/tap';\r\n//import Computermodel = require(\"../../model/computer/computer.model\");\r\n\r\n//import { flatMap } from 'rxjs/operators/flatMap';\r\n\r\n\r\n\r\n@Injectable()\r\nexport class ComputerService\r\n{\r\n  private dataUrl=\"api/Computer\";\r\n  //private dataUrl2=\"api/Computer\";\r\n\r\n  constructor(private http:HttpClient) {}\r\n    //: Observable<IComputerModel[]>\r\n    getData() {\r\n        return this.http.get<IComputerModel[]>(this.dataUrl);/*.pipe(\r\n            tap(t=>console.log(\"t=\"+t)),\r\n            map(m => {return new IComputerModel (m.)})\r\n        \r\n        );*/ //<-- edited by me#1#\r\n\r\n    }\r\n//.catch(this.handleError);\r\n//.then((response:Response)=>response.json() as IComputerModel[]) \r\n\r\n    getFullData(searched): Observable<IComputerFullModel> { //:Observable\r\n        return this.http.get<IComputerFullModel[]>(this.dataUrl + \"/\" + searched)\r\n            //    .map((response: Response) => response.json() as IComputerFullModel[])\r\n            .flatMap(f=>f);// => response.json() as IComputerFullModel[]); //editet by me\r\n        //.filter((r:IComputerFullModel)=>r.computerId===searched)\r\n        //   .catch(this.handleError);\r\n    }\r\n\r\n  private handleError(error: any): Promise<any> {\r\n    //console.error('An error occurred', error); // for demo purposes only\r\n    return Promise.reject(error.message || error);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./ClientApp/app/shared/service/computer/computer.service.ts","import { Injectable }    from '@angular/core';\r\nimport { Headers, Http, Response } from '@angular/http';\r\n\r\nimport { IMonitorModel } from '../../model/monitor/monitor.model';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport 'rxjs/add/operator/toPromise';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/catch';\r\n\r\n\r\n\r\n@Injectable()\r\nexport class MonitorService\r\n{\r\n  private dataUrl=\"api/Monitor\";\r\n\r\n  constructor(private http:HttpClient) {}\r\n\r\n  getData() {\r\n      return this.http.get<IMonitorModel[]>(this.dataUrl);\r\n      //.toPromise()\r\n      //.then((response:Response)=>response.json() as IMonitorModel[]) //edited by me\r\n      //.catch(this.handleError);\r\n  }\r\n\r\n  private handleError(error: any): Promise<any> {\r\n    //console.error('An error occurred', error); // for demo purposes only\r\n    return Promise.reject(error.message || error);\r\n}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./ClientApp/app/shared/service/monitor/monitor.service.ts","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { IProductModel } from \"../../model/product/product.model\";\r\n\r\n@Injectable()\r\nexport class ProductService {\r\n    private dataUrl = \"api/Product\";\r\n    constructor(private http: HttpClient) { }\r\n\r\n\r\n    getProduct(item) {\r\n        return this.http.get<IProductModel[]>(this.dataUrl + \"/\" + item);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./ClientApp/app/shared/service/product/product.service.ts","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { IServiceModel } from \"../../model/service/service.model\";\r\n\r\n@Injectable()\r\nexport class ServiceService {\r\n    private dataUrl = \"api/Service\";\r\n    constructor(private http: HttpClient) { }\r\n\r\n\r\n    getService(item) {\r\n        return this.http.get<IServiceModel[]>(this.dataUrl + \"/\" + item);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./ClientApp/app/shared/service/service/service.service.ts"],"sourceRoot":"webpack:///"}